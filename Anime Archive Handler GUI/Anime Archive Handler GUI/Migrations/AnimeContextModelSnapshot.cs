// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Anime_Archive_Handler_GUI.Migrations
{
    [DbContext(typeof(AnimeContext))]
    partial class AnimeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("AnimeBroadcastDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("String")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimeDtoId")
                        .IsUnique();

                    b.ToTable("Broadcasts");
                });

            modelBuilder.Entity("AnimeDemographic", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeDemographics");
                });

            modelBuilder.Entity("AnimeDto", b =>
                {
                    b.Property<long>("MalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Airing")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AnimePart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnimeSeason")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Episodes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Favorites")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Members")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Popularity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Score")
                        .HasColumnType("REAL");

                    b.Property<int?>("ScoredBy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("MalId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("AnimeExplicitGenre", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeExplicitGenres");
                });

            modelBuilder.Entity("AnimeGenre", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeGenres");
                });

            modelBuilder.Entity("AnimeLicensor", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeLicensors");
                });

            modelBuilder.Entity("AnimeProducer", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeProducers");
                });

            modelBuilder.Entity("AnimeStudio", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeStudios");
                });

            modelBuilder.Entity("AnimeTheme", b =>
                {
                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalUrlId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeDtoId", "MalUrlId");

                    b.HasIndex("MalUrlId");

                    b.ToTable("AnimeThemes");
                });

            modelBuilder.Entity("AnimeTrailerDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmbedUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YoutubeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimeDtoId")
                        .IsUnique();

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("ImageDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ImagesSetJpgId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ImagesSetWebPId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediumImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmallImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImagesSetJpgId")
                        .IsUnique();

                    b.HasIndex("ImagesSetWebPId")
                        .IsUnique();

                    b.HasIndex("ParentId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImagesSetDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnimeDtoId")
                        .IsUnique();

                    b.ToTable("ImageSets");
                });

            modelBuilder.Entity("MalUrlDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimeDtoId");

                    b.ToTable("MalUrls");
                });

            modelBuilder.Entity("TimePeriodDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimeDtoId")
                        .IsUnique();

                    b.ToTable("TimePeriods");
                });

            modelBuilder.Entity("TitleEntryDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimeDtoId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("AnimeBroadcastDto", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithOne("Broadcast")
                        .HasForeignKey("AnimeBroadcastDto", "AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AnimeDemographic", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Demographics")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "Demographic")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Demographic");
                });

            modelBuilder.Entity("AnimeExplicitGenre", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("ExplicitGenres")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "ExplicitGenre")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("ExplicitGenre");
                });

            modelBuilder.Entity("AnimeGenre", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Genres")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "Genre")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AnimeLicensor", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Licensors")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "Licensor")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Licensor");
                });

            modelBuilder.Entity("AnimeProducer", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Producers")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "Producer")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("AnimeStudio", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Studios")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "Studio")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("AnimeTheme", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Themes")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalUrlDto", "Theme")
                        .WithMany()
                        .HasForeignKey("MalUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("AnimeTrailerDto", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithOne("Trailer")
                        .HasForeignKey("AnimeTrailerDto", "AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("ImageDto", b =>
                {
                    b.HasOne("ImagesSetDto", "ImagesSetJpg")
                        .WithOne("JPG")
                        .HasForeignKey("ImageDto", "ImagesSetJpgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImagesSetDto", "ImagesSetWebP")
                        .WithOne("WebP")
                        .HasForeignKey("ImageDto", "ImagesSetWebPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeTrailerDto", "AnimeTrailer")
                        .WithOne("Image")
                        .HasForeignKey("ImageDto", "ParentId");

                    b.Navigation("AnimeTrailer");

                    b.Navigation("ImagesSetJpg");

                    b.Navigation("ImagesSetWebP");
                });

            modelBuilder.Entity("ImagesSetDto", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithOne("Images")
                        .HasForeignKey("ImagesSetDto", "AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("MalUrlDto", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("TimePeriodDto", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithOne("Aired")
                        .HasForeignKey("TimePeriodDto", "AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("TitleEntryDto", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("Titles")
                        .HasForeignKey("AnimeDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AnimeDto", b =>
                {
                    b.Navigation("Aired")
                        .IsRequired();

                    b.Navigation("Broadcast")
                        .IsRequired();

                    b.Navigation("Demographics");

                    b.Navigation("ExplicitGenres");

                    b.Navigation("Genres");

                    b.Navigation("Images")
                        .IsRequired();

                    b.Navigation("Licensors");

                    b.Navigation("Producers");

                    b.Navigation("Studios");

                    b.Navigation("Themes");

                    b.Navigation("Titles");

                    b.Navigation("Trailer")
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeTrailerDto", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("ImagesSetDto", b =>
                {
                    b.Navigation("JPG")
                        .IsRequired();

                    b.Navigation("WebP")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
