// <auto-generated />
using System;
using Anime_Archive_Handler_GUI.Database_Handeling;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Anime_Archive_Handler_GUI.Migrations
{
    [DbContext(typeof(AnimeContext))]
    [Migration("20240621053000_ConfigureForeignKeys")]
    partial class ConfigureForeignKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("AnimeBroadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("String")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AnimeBroadcasts");
                });

            modelBuilder.Entity("AnimeDto", b =>
                {
                    b.Property<long?>("MalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AiredId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Airing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BroadcastId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Episodes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Favorites")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImagesId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Members")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Popularity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Score")
                        .HasColumnType("REAL");

                    b.Property<int?>("ScoredBy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleEnglish")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleJapanese")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrailerYoutubeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("MalId");

                    b.HasIndex("AiredId");

                    b.HasIndex("BroadcastId");

                    b.HasIndex("ImagesId");

                    b.HasIndex("TrailerYoutubeId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("AnimeTrailer", b =>
                {
                    b.Property<string>("YoutubeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmbedUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("YoutubeId");

                    b.HasIndex("ImageId");

                    b.ToTable("AnimeTrailers");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImagesSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JPGId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WebPId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JPGId");

                    b.HasIndex("WebPId");

                    b.ToTable("ImagesSets");
                });

            modelBuilder.Entity("MalUrl", b =>
                {
                    b.Property<long>("MalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DemographicAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ExplicitGenreAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GenreAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LicensorAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProducerAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StudioAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ThemeAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MalId");

                    b.HasIndex("DemographicAnimeId");

                    b.HasIndex("ExplicitGenreAnimeId");

                    b.HasIndex("GenreAnimeId");

                    b.HasIndex("LicensorAnimeId");

                    b.HasIndex("ProducerAnimeId");

                    b.HasIndex("StudioAnimeId");

                    b.HasIndex("ThemeAnimeId");

                    b.ToTable("MalUrls");
                });

            modelBuilder.Entity("TimePeriod", b =>
                {
                    b.Property<DateTime?>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("To")
                        .HasColumnType("TEXT");

                    b.ToTable("TimePeriod");
                });

            modelBuilder.Entity("TimePeriodDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TimePeriodDto");
                });

            modelBuilder.Entity("TitleEntry", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AnimeDtoMalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Type");

                    b.HasIndex("AnimeDtoMalId");

                    b.ToTable("TitleEntries");
                });

            modelBuilder.Entity("TitleSynonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Synonym")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("TitleSynonym");
                });

            modelBuilder.Entity("AnimeDto", b =>
                {
                    b.HasOne("TimePeriodDto", "Aired")
                        .WithMany()
                        .HasForeignKey("AiredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeBroadcast", "Broadcast")
                        .WithMany()
                        .HasForeignKey("BroadcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImagesSet", "Images")
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeTrailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerYoutubeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aired");

                    b.Navigation("Broadcast");

                    b.Navigation("Images");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("AnimeTrailer", b =>
                {
                    b.HasOne("Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ImagesSet", b =>
                {
                    b.HasOne("Image", "JPG")
                        .WithMany()
                        .HasForeignKey("JPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Image", "WebP")
                        .WithMany()
                        .HasForeignKey("WebPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JPG");

                    b.Navigation("WebP");
                });

            modelBuilder.Entity("MalUrl", b =>
                {
                    b.HasOne("AnimeDto", null)
                        .WithMany("Demographics")
                        .HasForeignKey("DemographicAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnimeDto", null)
                        .WithMany("ExplicitGenres")
                        .HasForeignKey("ExplicitGenreAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnimeDto", null)
                        .WithMany("Genres")
                        .HasForeignKey("GenreAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnimeDto", null)
                        .WithMany("Licensors")
                        .HasForeignKey("LicensorAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnimeDto", null)
                        .WithMany("Producers")
                        .HasForeignKey("ProducerAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnimeDto", null)
                        .WithMany("Studios")
                        .HasForeignKey("StudioAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AnimeDto", null)
                        .WithMany("Themes")
                        .HasForeignKey("ThemeAnimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TitleEntry", b =>
                {
                    b.HasOne("AnimeDto", null)
                        .WithMany("Titles")
                        .HasForeignKey("AnimeDtoMalId");
                });

            modelBuilder.Entity("TitleSynonym", b =>
                {
                    b.HasOne("AnimeDto", "Anime")
                        .WithMany("TitleSynonyms")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AnimeDto", b =>
                {
                    b.Navigation("Demographics");

                    b.Navigation("ExplicitGenres");

                    b.Navigation("Genres");

                    b.Navigation("Licensors");

                    b.Navigation("Producers");

                    b.Navigation("Studios");

                    b.Navigation("Themes");

                    b.Navigation("TitleSynonyms");

                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
